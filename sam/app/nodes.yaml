AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'wolfeidau: highly scalable backend web service'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
    - Label:
        default: 'Node Parameters'
      Parameters:
      - ImageId
      - PrefixListId
      - MasterLogsRetentionInDays
      - MasterVolumeSize
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  MasterLogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  MasterVolumeSize:
    Description: 'The root volume size, in Gibibytes (GiB). Keep in mind that Jenkins home lives on EFS.'
    Type: Number
    Default: 8
    ConstraintDescription: 'Must be in the range [8-1024]'
    MinValue: 8
    MaxValue: 1024
  ImageId:
    Type: AWS::EC2::Image::Id
  PrefixListId:
    Type: String
  ASGOnDemandBaseCapacity:
    Type: Number
    Default: 0
  ASGMinSize:
    Type: Number
    Default: 0
  ASGMaxSize:
    Type: Number
    Default: 3
  ASGDesiredCapacity:
    Type: Number
    Default: 2
Resources:
  MasterAutoscalingTopic:
    Type: AWS::SNS::Topic
    Properties: {}

  MasterLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref MasterLogsRetentionInDays

  MasterSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'web-service-node'
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
      SecurityGroupIngress:
      - SourcePrefixListId: !Ref PrefixListId
        FromPort: 8443
        ToPort: 8443
        IpProtocol: tcp

  MasterIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: ssm
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ssmmessages:*' # SSM Agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
            - 'ssm:UpdateInstanceInformation' # SSM agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
            - 'ec2messages:*' # SSM Session Manager by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
            Resource: '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource: !GetAtt 'MasterLogs.Arn'

  MasterInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref MasterIAMRole

  MasterLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: '/dev/xvda'
          Ebs:
            Encrypted: true
            VolumeSize: !Ref MasterVolumeSize
            VolumeType: gp3
        IamInstanceProfile:
          Name: !Ref MasterInstanceProfile
        ImageId: !Ref ImageId
        SecurityGroupIds:
        - !Ref MasterSG
        UserData:
          'Fn::Base64': !Sub |
            #!/bin/bash -x
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MasterLaunchTemplate --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MasterASG --region ${AWS::Region}

  MasterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: !Ref ASGOnDemandBaseCapacity
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: "capacity-optimized"
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref MasterLaunchTemplate
            Version: !GetAtt 'MasterLaunchTemplate.LatestVersionNumber'
          Overrides:
            - InstanceType: t4g.nano
            - InstanceType: t4g.micro
      MinSize: !Ref ASGMinSize
      MaxSize: !Ref ASGMaxSize
      DesiredCapacity: !Ref ASGDesiredCapacity
      VPCZoneIdentifier:
      - {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetAPublic'}
      - {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetBPublic'}
      - {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetCPublic'}
      NotificationConfigurations:
        - NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN: !Ref MasterAutoscalingTopic
      Tags:
      - Key: Name
        Value: 'web-service-node'
        PropagateAtLaunch: true

  MasterAutoScalingGroupLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref MasterAutoScalingGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: 300
      LifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING"

  MasterAutoScalingGroupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${MasterAutoScalingGroupFunction}"
      RetentionInDays: 14

  MasterAutoScalingGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: provided.al2
      Handler: bootstrap
      CodeUri: ../../dist/asg-lifecycle-lambda_linux_arm64.zip
      Policies:
      - Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
            - "autoscaling:CompleteLifecycleAction"
          Resource: !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${MasterAutoScalingGroup}"
      Events:
        AutoScalingEventRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                  - "aws.autoscaling"
              detail-type:
                  - "EC2 Instance-launch Lifecycle Action"
              detail:
                  AutoScalingGroupName:
                    - !Ref MasterAutoScalingGroup
      Architectures: [arm64]
